module memory #(
  parameter ADDR_WIDTH = 2,
  parameter DATA_WIDTH = 8)
  (
    
  	input 	logic						clk;
  	input 	logic						rst;
  
    //control signal
    input	logic 	[ADDR_WIDTH-1:0]	addr;
  	input 	logic						wr_en;
  	input	logic			 			rd_en;
    //data signals
    input	logic 	[DATA_WIDTH-1:0]	wdata;
    output			[DATA_WIDTH-1:0]	rdata;
);
  
  reg [DATA_WIDTH-1:0] rdata;
  //memory
  reg [DATA_WIDTH-1:0] mem [2**ADDR_WIDTH];
  
  always@(posedge rst)
    for(int i=0, i<2**ADDR_WIDTH; i++)
      mem[i] <= 8'hFF;
  
  always@(posedge clk)
    if(wr_en)
      mem[addr] <= wdata;
  
  always@(posedge clk)
    if(rd_en)
      rdata <= mem[addr]
endmodule : mem
      
